{
  "hash": "d18828a991b247f6e07be3828534fdf7",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"P16 Day 2025\"\ntitle-block-banner: true\ndate: 2025-10-14\nsubtitle: \"Skrub - Machine learning with dataframes\"\nauthor: \"Riccardo Cappuzzo\"\ninstitute: \"Inria P16\"\nformat: \n    revealjs:\n        slide-number: c/t\n        show-slide-number: all\n        preview-links: auto\n        embed-resources: false\n        transition: slide\n        theme: simple\n        logo: images/skrub.svg\n        css: style.css\n        footer: \"https://skrub-data.org/skrub-materials/\"\nincremental: false\nparams: \n    version: \"base\"\n---\n\n\n\n\n\n# Boost your productivity with skrub! {auto-animate=\"true\"}\n\nSkrub simplifies many tedious data preparation operations\n\n## Skrub compatibility\n- Skrub is fully compatible with pandas and polars\n- Skrub transformers are fully compatible with scikit-learn\n\n## An example pipeline\n1. Gather some data\n2. Explore the data\n3. Preprocess the data \n4. Perform feature engineering \n5. Build a scikit-learn pipeline\n6. ???\n7. Profit?  \n\n##  \n![](images/here-we-go-again.png)\n\n## Exploring the data with `skrub` {.smaller auto-animate=\"true\"}\n\n```{.python}\nfrom skrub import TableReport\nTableReport(employee_salaries)\n```\n[TableReport Preview](https://skrub-data.org/skrub-reports/examples/employee_salaries.html){preview-link=\"true\"}\n\n\n::: {.fragment}\n::: {.nonincremental}\nMain features:\n\n- Obtain high-level statistics about the data\n- Explore the distribution of values and find outliers\n- Discover highly correlated columns \n- Export and share the report as an `html` file\n:::\n:::\n\n::: {.fragment}\n<a href=\"https://skrub-data.org/skrub-reports/examples/\" target=\"_blank\">More examples</a>\n\n:::\n\n## Data cleaning with pandas/polars: setup {.smaller auto-animate=\"true\"}\n\n::: {.panel-tabset}\n\n### Pandas\n\n::: {#19b31adb .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd\nimport numpy as np\n\ndata = {\n    \"Int\": [2, 3, 2],  # Multiple unique values\n    \"Const str\": [\"x\", \"x\", \"x\"],  # Single unique value\n    \"Str\": [\"foo\", \"bar\", \"baz\"],  # Multiple unique values\n    \"All nan\": [np.nan, np.nan, np.nan],  # All missing values\n    \"All empty\": [\"\", \"\", \"\"],  # All empty strings\n    \"Date\": [\"01 Jan 2023\", \"02 Jan 2023\", \"03 Jan 2023\"],\n}\n\ndf_pd = pd.DataFrame(data)\ndisplay(df_pd)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Int</th>\n      <th>Const str</th>\n      <th>Str</th>\n      <th>All nan</th>\n      <th>All empty</th>\n      <th>Date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>x</td>\n      <td>foo</td>\n      <td>NaN</td>\n      <td></td>\n      <td>01 Jan 2023</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>x</td>\n      <td>bar</td>\n      <td>NaN</td>\n      <td></td>\n      <td>02 Jan 2023</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>x</td>\n      <td>baz</td>\n      <td>NaN</td>\n      <td></td>\n      <td>03 Jan 2023</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Polars\n\n::: {#a170c906 .cell execution_count=2}\n``` {.python .cell-code}\nimport polars as pl\nimport numpy as np\ndata = {\n    \"Int\": [2, 3, 2],  # Multiple unique values\n    \"Const str\": [\"x\", \"x\", \"x\"],  # Single unique value\n    \"Str\": [\"foo\", \"bar\", \"baz\"],  # Multiple unique values\n    \"All nan\": [np.nan, np.nan, np.nan],  # All missing values\n    \"All empty\": [\"\", \"\", \"\"],  # All empty strings\n    \"Date\": [\"01 Jan 2023\", \"02 Jan 2023\", \"03 Jan 2023\"],\n}\n\ndf_pl = pl.DataFrame(data)\ndisplay(df_pl)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 6)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>Int</th><th>Const str</th><th>Str</th><th>All nan</th><th>All empty</th><th>Date</th></tr><tr><td>i64</td><td>str</td><td>str</td><td>f64</td><td>str</td><td>str</td></tr></thead><tbody><tr><td>2</td><td>&quot;x&quot;</td><td>&quot;foo&quot;</td><td>NaN</td><td>&quot;&quot;</td><td>&quot;01 Jan 2023&quot;</td></tr><tr><td>3</td><td>&quot;x&quot;</td><td>&quot;bar&quot;</td><td>NaN</td><td>&quot;&quot;</td><td>&quot;02 Jan 2023&quot;</td></tr><tr><td>2</td><td>&quot;x&quot;</td><td>&quot;baz&quot;</td><td>NaN</td><td>&quot;&quot;</td><td>&quot;03 Jan 2023&quot;</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n:::\n\n\n## Nulls, datetimes, constant columns with pandas/polars {.smaller auto-animate=\"true\"}\n\n:::{.panel-tabset}\n### Pandas\n\n::: {#3a6096ba .cell execution_count=3}\n``` {.python .cell-code}\n# Parse the datetime strings with a specific format\ndf_pd['Date'] = pd.to_datetime(df_pd['Date'], format='%d %b %Y')\n\n# Drop columns with only a single unique value\ndf_pd_cleaned = df_pd.loc[:, df_pd.nunique(dropna=True) > 1]\n\n# Function to drop columns with only missing values or empty strings\ndef drop_empty_columns(df):\n    # Drop columns with only missing values\n    df_cleaned = df.dropna(axis=1, how='all')\n    # Drop columns with only empty strings\n    empty_string_cols = df_cleaned.columns[df_cleaned.eq('').all()]\n    df_cleaned = df_cleaned.drop(columns=empty_string_cols)\n    return df_cleaned\n\n# Apply the function to the DataFrame\ndf_pd_cleaned = drop_empty_columns(df_pd_cleaned)\n```\n:::\n\n\n### Polars\n\n::: {#2e8a08f5 .cell execution_count=4}\n``` {.python .cell-code}\n# Parse the datetime strings with a specific format\ndf_pl = df_pl.with_columns([\n    pl.col(\"Date\").str.strptime(pl.Date, \"%d %b %Y\", strict=False).alias(\"Date\")\n])\n\n# Drop columns with only a single unique value\ndf_pl_cleaned = df_pl.select([\n    col for col in df_pl.columns if df_pl[col].n_unique() > 1\n])\n\n# Import selectors for dtype selection\nimport polars.selectors as cs\n\n# Drop columns with only missing values or only empty strings\ndef drop_empty_columns(df):\n    all_nan = df.select(\n        [\n            col for col in df.select(cs.numeric()).columns if \n            df [col].is_nan().all()\n        ]\n    ).columns\n    \n    all_empty = df.select(\n        [\n            col for col in df.select(cs.string()).columns if \n            (df[col].str.strip_chars().str.len_chars()==0).all()\n        ]\n    ).columns\n\n    to_drop = all_nan + all_empty\n\n    return df.drop(to_drop)\n\ndf_pl_cleaned = drop_empty_columns(df_pl_cleaned)\n```\n:::\n\n\n:::\n\n## Data cleaning with `skrub.Cleaner` {.smaller auto-animate=\"true\"}\n\n:::{.panel-tabset}\n### Pandas\n\n::: {#d8575005 .cell execution_count=5}\n``` {.python .cell-code}\nfrom skrub import Cleaner\ncleaner = Cleaner(drop_if_constant=True, datetime_format='%d %b %Y')\ndf_cleaned = cleaner.fit_transform(df_pd)\ndisplay(df_cleaned)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Int</th>\n      <th>Str</th>\n      <th>Date</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2</td>\n      <td>foo</td>\n      <td>2023-01-01</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3</td>\n      <td>bar</td>\n      <td>2023-01-02</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>baz</td>\n      <td>2023-01-03</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### Polars\n\n::: {#45b70d11 .cell execution_count=6}\n``` {.python .cell-code}\nfrom skrub import Cleaner\ncleaner = Cleaner(drop_if_constant=True, datetime_format='%d %b %Y')\ndf_cleaned = cleaner.fit_transform(df_pl)\ndisplay(df_cleaned)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div><style>\n.dataframe > thead > tr,\n.dataframe > tbody > tr {\n  text-align: right;\n  white-space: pre-wrap;\n}\n</style>\n<small>shape: (3, 3)</small><table border=\"1\" class=\"dataframe\"><thead><tr><th>Int</th><th>Str</th><th>Date</th></tr><tr><td>i64</td><td>str</td><td>date</td></tr></thead><tbody><tr><td>2</td><td>&quot;foo&quot;</td><td>2023-01-01</td></tr><tr><td>3</td><td>&quot;bar&quot;</td><td>2023-01-02</td></tr><tr><td>2</td><td>&quot;baz&quot;</td><td>2023-01-03</td></tr></tbody></table></div>\n```\n:::\n:::\n\n\n:::\n\n## Encoding datetime features with `skrub.DatetimeEncoder` {auto-animate=\"true\" visibility=\"uncounted\" .smaller}\n\n\n\n::: {#2369abfd .cell execution_count=8}\n``` {.python .cell-code}\nfrom skrub import DatetimeEncoder, ToDatetime\n\nX_date = ToDatetime().fit_transform(df[\"date\"])\nde = DatetimeEncoder(resolution=\"second\")\n# de = DatetimeEncoder(periodic_encoding=\"spline\")\nX_enc = de.fit_transform(X_date)\nprint(X_enc)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nshape: (3, 7)\n┌───────────┬────────────┬──────────┬───────────┬─────────────┬─────────────┬────────────────────┐\n│ date_year ┆ date_month ┆ date_day ┆ date_hour ┆ date_minute ┆ date_second ┆ date_total_seconds │\n│ ---       ┆ ---        ┆ ---      ┆ ---       ┆ ---         ┆ ---         ┆ ---                │\n│ f32       ┆ f32        ┆ f32      ┆ f32       ┆ f32         ┆ f32         ┆ f32                │\n╞═══════════╪════════════╪══════════╪═══════════╪═════════════╪═════════════╪════════════════════╡\n│ 2023.0    ┆ 1.0        ┆ 1.0      ┆ 12.0      ┆ 34.0        ┆ 56.0        ┆ 1.6726e9           │\n│ 2023.0    ┆ 2.0        ┆ 15.0     ┆ 8.0       ┆ 45.0        ┆ 23.0        ┆ 1.6765e9           │\n│ 2023.0    ┆ 3.0        ┆ 20.0     ┆ 18.0      ┆ 12.0        ┆ 45.0        ┆ 1.6793e9           │\n└───────────┴────────────┴──────────┴───────────┴─────────────┴─────────────┴────────────────────┘\n```\n:::\n:::\n\n\n## Encoding numerical features with `skrub.SquashingScaler`\n\n::: {#75de5062 .cell execution_count=9}\n\n::: {.cell-output .cell-output-display}\n![](slides_files/figure-revealjs/cell-10-output-1.png){width=587 height=395 fig-align='center'}\n:::\n:::\n\n\n::: {.notes}\nSkrub wants to solve ML problems based partly on solid engineering and partly on\nstatistical notions. The SquashingScaler is based on the second part, and is taken\nfrom a recent paper that evaluates different techniques for improving the performance\nof NNs. \n:::\n\n\n\n## Encoding numerical features with `skrub.SquashingScaler`\n\n::: {#f001fd45 .cell execution_count=10}\n\n::: {.cell-output .cell-output-display}\n![](slides_files/figure-revealjs/cell-11-output-1.png){width=815 height=491 fig-align='center'}\n:::\n:::\n\n\n## Encoding categorical (string/text) features\nCategorical features have a \"**cardinality**\": the number of unique values\n\n::: {.incremental}\n\n- Low cardinality: `OneHotEncoder`\n- High cardinality (>40 unique values): `skrub.StringEncoder`\n- Text: `skrub.TextEncoder` and pretrained models from HuggingFace Hub\n\n:::\n\n## Encoding _all the features_: `TableVectorizer` { auto-animate=\"true\"}\n\n::: {#a6e2cc28 .cell execution_count=11}\n``` {.python .cell-code}\nfrom skrub import TableVectorizer\n\ntable_vec = TableVectorizer()\ndf_encoded = table_vec.fit_transform(df)\n```\n:::\n\n\n::: {.fragment}\n- Apply the `Cleaner` to all columns\n- Split columns by dtype and # of unique values\n- Encode each column separately\n:::\n\n\n## Encoding _all the features_: `TableVectorizer` {.smaller auto-animate=\"true\"}\n\n![](images/skrub-table-vectorizer.png)\n\n\n## Build a predictive pipeline {auto-animate=\"true\"}\n```{.python}\nfrom sklearn.linear_model import Ridge\nmodel = Ridge()\n```\n## Build a predictive pipeline {auto-animate=\"true\" visibility=\"uncounted\"}\n```{.python}\nfrom sklearn.linear_model import Ridge\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.compose import make_column_selector as selector\nfrom sklearn.compose import make_column_transformer\n\ncategorical_columns = selector(dtype_include=object)(employees)\nnumerical_columns = selector(dtype_exclude=object)(employees)\n\nct = make_column_transformer(\n      (StandardScaler(),\n       numerical_columns),\n      (OneHotEncoder(handle_unknown=\"ignore\"),\n       categorical_columns))\n\nmodel = make_pipeline(ct, SimpleImputer(), Ridge())\n```\n## Build a predictive pipeline with `tabular_pipeline` {auto-animate=\"true\" .smaller}\n```{.python}\nimport skrub\nfrom sklearn.linear_model import Ridge\nmodel = skrub.tabular_pipeline(Ridge())\n```\n\n![](images/skrub-tabular-pipeline-linear-model.png){fig-align=\"center\"}\n\n## \n![](images/drakeno.png){fig-align=\"center\"}\n\n## We now have a pipeline! {.smaller}\n\n1. Gather some data\n2. Explore the data\n    - `TableReport`\n3. Pre-process the data \n    - `Cleaner`, `ToDatetime` ... \n4. Perform feature engineering\n    - `TableVectorizer`, `SquashingScaler`, `TextEncoder`, `StringEncoder `...\n5. Build a scikit-learn pipeline\n    - `tabular_pipeline`\n6. ???\n7. Profit 📈 \n\n\n# What if this is not enough?? \n\n## What if... {.smaller}\n\n::: {.incremental}\n\n- Your data is spread over multiple tables? \n- You want to avoid data leakage? \n- You want to tune more than just the hyperparameters of your model? \n- You want to guarantee that your pipeline is replayed exactly on new data? \n\n:::\n\n::: {.fragment}\nWhen a normal pipeline is not enough...\n::: \n\n::: {.fragment }\n... the `skrub` DataOps come to the rescue 🚒\n:::\n\n\n## DataOps...\n\n::: {.incremental}\n- Extend the `scikit-learn` machinery to complex multi-table operations, and take care of data leakage\n- Track all operations with a computational graph (a *Data Ops plan*)\n- Are transparent and give direct access to the underlying object\n- Allow tuning any operation in the Data Ops plan\n- Guarantee that all operations are reproducible\n- Can be persisted and shared easily \n:::\n\n## How do DataOps work, though?  {.smaller}\nDataOps **wrap** around *user operations*, where user operations are:\n\n- any dataframe operation (e.g., merge, group by, aggregate etc.)\n- scikit-learn estimators (a Random Forest, RidgeCV etc.)\n- custom user code (load data from a path, fetch from an URL etc.)\n\n::: {.fragment}\n\n::: {.callout-important}\nDataOps _record_ user operations, so that they can later be _replayed_ in the same\norder and with the same arguments on unseen data. \n:::\n::: \n\n## Starting with the `DataOps` {auto-animate=\"true\"} \n\n::: {#4321af58 .cell execution_count=12}\n``` {.python .cell-code}\nimport skrub\ndata = skrub.datasets.fetch_credit_fraud()\n\nbaskets = skrub.var(\"baskets\", data.baskets)\nproducts = skrub.var(\"products\", data.products) # add a new variable\n\nX = baskets[[\"ID\"]].skb.mark_as_X()\ny = baskets[\"fraud_flag\"].skb.mark_as_y()\n```\n:::\n\n\n- `baskets` and `products` represent inputs to the pipeline.\n- Skrub tracks `X` and `y` so that training and test splits are never mixed. \n\n## Applying a transformer {auto-animate=\"true\"}\n\n::: {#ad283604 .cell execution_count=13}\n``` {.python .cell-code}\nfrom skrub import selectors as s\n\nvectorizer = skrub.TableVectorizer(\n    high_cardinality=skrub.StringEncoder()\n)\nvectorized_products = products.skb.apply(\n    vectorizer, cols=s.all() - \"basket_ID\"\n)\n```\n:::\n\n\n##  Executing dataframe operations {auto-animate=\"true\"}\n\n::: {#61065fab .cell execution_count=14}\n``` {.python .cell-code}\naggregated_products = vectorized_products.groupby(\n    \"basket_ID\"\n).agg(\"mean\").reset_index()\n\nfeatures = X.merge(\n    aggregated_products, left_on=\"ID\", right_on=\"basket_ID\"\n)\nfeatures = features.drop(columns=[\"ID\", \"basket_ID\"])\n```\n:::\n\n\n##  Applying a ML model {auto-animate=\"true\"}\n\n::: {#8e3afa71 .cell execution_count=15}\n``` {.python .cell-code}\nfrom sklearn.ensemble import ExtraTreesClassifier  \npredictions = features.skb.apply(\n    ExtraTreesClassifier(n_jobs=-1), y=y\n)\n```\n:::\n\n\n## Inspecting the Data Ops plan\n```{.python}\npredictions.skb.full_report()\n```\n<br/>\n\n<a href=\"dataop_report/index.html\" target=\"_blank\">Execution report</a>\n\nEach node:\n\n- Shows a preview of the data resulting from the operation\n- Reports the location in the code where the code is defined\n- Shows the run time of the node \n\n## Exporting the plan in a `learner` {.smaller}\nThe **Learner** is a stand-alone object that works like\na scikit-learn estimator that takes a dictionary as input rather\nthan just `X` and `y`. \n\n\n::: {.fragment}\n\n::: {#19ee2307 .cell execution_count=16}\n``` {.python .cell-code}\nlearner = predictions.skb.make_learner(fitted=True)\n```\n:::\n\n\n:::\n\n\n::: {.fragment}\nThen, the `learner` can be pickled ...\n\n\n\n```{.python}\nimport pickle\n\nwith open(\"learner.bin\", \"wb\") as fp:\n    pickle.dump(learner, fp)\n```\n\n\n\n:::\n\n::: {.fragment}\n... loaded and applied to new data:\n\n```{.python}\nwith open(\"learner.bin\", \"rb\") as fp:\n    loaded_learner = pickle.load(fp)\ndata = skrub.datasets.fetch_credit_fraud(split=\"test\")\nnew_baskets = data.baskets\nnew_products = data.products\nloaded_learner.predict({\"baskets\": new_baskets, \"products\": new_products})\n```\n\n::: {#1331cda3 .cell execution_count=19}\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\narray([0, 0, 0, ..., 0, 0, 0], shape=(31549,))\n```\n:::\n:::\n\n\n:::\n\n\n## Hyperparameter tuning in a Data Ops plan \nSkrub implements four `choose_*` functions:\n\n- `choose_from`: select from the given list of options\n- `choose_int`: select an integer within a range\n- `choose_float`: select a float within a range\n- `choose_bool`: select a bool \n- `optional`: chooses whether to execute the given operation\n\n\n## Tuning in `scikit-learn` can be complex {.smaller auto-animate=\"true\"}\n\n```{.python}\npipe = Pipeline([(\"dim_reduction\", PCA()), (\"regressor\", Ridge())])\ngrid = [\n    {\n        \"dim_reduction\": [PCA()],\n        \"dim_reduction__n_components\": [10, 20, 30],\n        \"regressor\": [Ridge()],\n        \"regressor__alpha\": loguniform(0.1, 10.0),\n    },\n    {\n        \"dim_reduction\": [SelectKBest()],\n        \"dim_reduction__k\": [10, 20, 30],\n        \"regressor\": [Ridge()],\n        \"regressor__alpha\": loguniform(0.1, 10.0),\n    },\n    {\n        \"dim_reduction\": [PCA()],\n        \"dim_reduction__n_components\": [10, 20, 30],\n        \"regressor\": [RandomForestRegressor()],\n        \"regressor__n_estimators\": loguniform(20, 200),\n    },\n    {\n        \"dim_reduction\": [SelectKBest()],\n        \"dim_reduction__k\": [10, 20, 30],\n        \"regressor\": [RandomForestRegressor()],\n        \"regressor__n_estimators\": loguniform(20, 200),\n    },\n]\n```\n## Tuning with Data Ops is simple! {.smaller} \n\n```python \ndim_reduction = X.skb.apply(\n    skrub.choose_from(\n        {\n            \"PCA\": PCA(n_components=skrub.choose_int(10, 30)),\n            \"SelectKBest\": SelectKBest(k=skrub.choose_int(10, 30))\n        }, name=\"dim_reduction\"\n    )\n)\nregressor = dim_reduction.skb.apply(\n    skrub.choose_from(\n        {\n            \"Ridge\": Ridge(alpha=skrub.choose_float(0.1, 10.0, log=True)),\n            \"RandomForest\": RandomForestRegressor(\n                n_estimators=skrub.choose_int(20, 200, log=True)\n            )\n        }, name=\"regressor\"\n    )\n)\n```\n\n## Run hyperparameter search\n```{.python}\n# fit the search \nsearch = regressor.skb.make_randomized_search(\n    scoring=\"roc_auc\", fitted=True, cv=5\n)\n\n# save the best learner\nbest_learner = search.best_learner_\n```\n## A parallel coordinate plot to explore hyperparameters{auto-animate=\"true\" .smaller} \n\n```{.python}\nsearch = pred.skb.get_randomized_search(fitted=True)\nsearch.plot_parallel_coord()\n```\n\n::: {#b7a4acc9 .cell execution_count=20}\n\n::: {.cell-output .cell-output-display}\n```{=html}\n        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        </script>\n        <script type=\"module\">import \"https://cdn.plot.ly/plotly-3.0.1.min\"</script>\n        \n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>            <script src=\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-AMS-MML_SVG\"></script><script type=\"text/javascript\">if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}</script>                <script type=\"text/javascript\">window.PlotlyConfig = {MathJaxConfig: 'local'};</script>\n        <script charset=\"utf-8\" src=\"https://cdn.plot.ly/plotly-3.0.1.min.js\"></script>                <div id=\"279b2532-c1c1-4569-9a4a-44c2ce41a4c9\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                window.PLOTLYENV=window.PLOTLYENV || {};                                if (document.getElementById(\"279b2532-c1c1-4569-9a4a-44c2ce41a4c9\")) {                    Plotly.newPlot(                        \"279b2532-c1c1-4569-9a4a-44c2ce41a4c9\",                        [{\"dimensions\":[{\"label\":\"dropped_cols\",\"ticktext\":[\"calendar\",\"cloud_cover\",\"future_1h\",\"future_24h\",\"holiday\",\"load\",\"moisture\",\"non_paris_weather\",\"none\",\"rolling_load\",\"temperature\",\"weather\"],\"tickvals\":[0,1,2,3,4,5,6,7,8,9,10,11],\"values\":{\"dtype\":\"f8\",\"bdata\":\"9SBQ3oRj\\u002fz8rnn7ndzUYQNtGaVDP8yFAZoy1v8wBGEBsc74XSvshQBlPymzb\\u002f\\u002f8\\u002fdLIFBFm98D\\u002f+d7YYeOwfQB4DzZDN6x9An+lEdUwYGEBBAcApS9YfQBhGsr7h5SFAQ0fqDJD5G0B0XIMwoM0XQKlPmJXA7BtA3huIHSDfF0AK5YPm6\\u002fkhQIM9d8bDDCBAwkivGX0IHECwTkEtAf4bQDPLy9iY4R9AXnEkfx9U\\u002fz812XEXk9oXQLO39FeN6Q9AqXn7jYvhF0AAZnlGQ94bQLzSULmwzA9AimR+HG0hEECWaS9ePU\\u002f\\u002fP1LugEcZ+yFAQ10LpzY1EEAVzDw6+eQXQKoh0X5WByBAW4To1LdeAEAgwy5O1ywAQE35p8489CNAP1uKh4LkI0CVKraOLOojQLMBakymEiJANj59x0UUAECsWPyTC\\u002foPQBVCrJgbESRAwk0V0fT3G0AeS8SUYQQkQAAAAAAAACZAq7k08v35I0AZZGCQNPglQEbfwUEIDBhA0Yto3x7kJUB9aEdyuFMIQLZ8tPXgFyRAdPzdnLvqH0AAAAAAAAAmQBTzd+uxtQdAT4oi39KqB0Cexlth0yEQQAAAAAAAACZA9souND7lJUCxrGpxP\\u002fQPQHt4G069VwhAJopx+zUYCECIDv9rDvofQEgBTJPi5SNA2HG2zn\\u002fpJUD7X+vdXcQPQAAAAAAAACZAtY\\u002f6a0onFECNsVOJDM4TQPiK9lLa7iVAmuQct1vV\\u002fz+I3QT3mFUIQCspliBv\\u002fBNAAAAAAAAAAAD2Fv4hilqlP2QmhqjMn6c\\u002fhH4\\u002f2wD+oD9o3YJ5GxJ7PyzmqMOD6h9AlLfpvUnHoj+EMxee0uYTQGkJKxH98h9AHdNKsH4QEEAAAAAAAAAAAHUby3y35iVAeh4I7fsJJEByqpKEbgIiQCGNPZJ5hKo\\u002fUG4VUyygoT+51jKPheepP5qQp7v75yVAAAAAAAAAAAB3LwD5RMsTQFolIL3TNRhAJHWcCQvcG0AAAAAAAAAAACT6ikY8zx9A0hTsQbzeE0CKimbYivYPQNB0KXsAAyRAya0yBp0DFEA=\"}},{\"label\":\"learning_rate\",\"ticktext\":[\"0.01\",\"0.02\",\"0.03\",\"0.05\",\"0.08\",\"0.13\",\"0.21\",\"0.35\",\"0.58\",\"0.96\"],\"tickvals\":[-4.539562789300175,-4.039792116878816,-3.5400214444574583,-3.0402507720361003,-2.540480099614742,-2.0407094271933834,-1.5409387547720255,-1.0411680823506675,-0.5413974099293091,-0.04162673750795066],\"values\":{\"dtype\":\"f8\",\"bdata\":\"S1JnLsuRAsB\\u002f5os5eQ\\u002f3v4LhYQL+D\\u002fu\\u002fzmryfj4U978Gx1VY7iMFwFuwytRJDQPAA7sMj8svBsAYkSzY2b4FwH76Q00UJ\\u002fq\\u002fTJSsWm43BMDLZKs\\u002fx773vzUBP11G4++\\u002fGYyOQJtI8r\\u002fCJSbEKxUJwL\\u002f9HCs0If+\\u002f7vv8MPvc7b9X1+JNErn9vwL8CNrMofa\\u002fCy82g08aAMCQD8u6mkoCwK7nRv+Guvy\\u002fmpadITY2CcDQkBcTz\\u002fTYv+uIwyMnfQDAyod36\\u002fXF8L\\u002fa4BcFWjLmv45OAMvDvv2\\u002fR\\u002fTPBCVo+L\\u002f4NpOx5h7dv+mztxhtn\\u002fW\\u002fbd4rAvc3\\u002fb9m0Izyo6bmv+oC9RMDvPG\\u002fecBYi+L2AsDjPNvDQanmv0nDLGPs0QTAwf7C19tBAcBwxmPi\\u002fLQCwJvcYv4C5wHAkkmZjqXbAcD8og9Tx\\u002fsMwL2z38YEZgjAuCK0ZsyXDcC+Gi8IG54IwMFaQdES2PG\\u002fv0jptCDRCcBNgTGhtfQDwGO7X5PceQvAHKOfCvCNCcAOun47GZH\\u002fv0XBLkUTwuW\\u002f6nWNRlCjDcAlfPrhXqjav5mJEbyw\\u002fvm\\u002f6oEuWUZf9L8esb4B\\u002fgjhv7zQ\\u002fMErd+q\\u002fZn09Y+Xz5r8Mk\\u002frBXwwNwDL9mvQWvwXAcuTA5lWG5b\\u002fuUj6DOn2rvy5sB2xj9NO\\u002f4TBTTUrDCcCiMddvHrcIwOs\\u002fuar6VwrAP9WuOk3M8b89++fFZ94JwBRvn57WFhDAJn9NGee2C8B8iyo4lp+3v1VGZkqUcwfAm1FQHceCBcDLyibIWD4DwLl5Zf0pvAjALwl8qN8yDcA9x9+wNHUNwG+uopD8DxDA2VQtN5+RDcAtxaOs8kYNwAiZArVHfBDApCtUJDQ9EcAYpp2C9jfjv8NcOqb8RxDAEeCwmqTBEMAHtmaKgmQRwEbv3uPwhdi\\u002fBXWjg52I1b+5fVNWD6HIvyAMVfSNoxHA4L+zQ\\u002fT2EMCicGzOi84NwALa2PjAHQ\\u002fAR+CMaTu1DsABvniIGVClv5ryDmdV+g\\u002fAGyaFGmE4DsCo8ucCSlsRwC272CWDKBLA2Xwx6XjcEcA=\"}},{\"label\":\"loss\",\"ticktext\":[\"gamma\",\"poisson\",\"squared_error\"],\"tickvals\":[0,1,2],\"values\":{\"dtype\":\"f8\",\"bdata\":\"KUe9p3ER8D\\u002f7mi7eYcvvP6hYaGJVHvA\\u002fIMNAiCDa7z8AAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAHBfyHLrHvA\\u002fAAAAAAAAAEA9+BiTj+X\\u002fPwAAAAAAAABA\\u002fzDIW9IY8D8w3EaqWrrvPw+qwWKlEPA\\u002fbtepITDZ7z\\u002fmDk0JpBbwP3wTF1jJ7f8\\u002fmIiMiRX97z\\u002fs9w40AOf\\u002fP2TDkV7p4+8\\u002fx81hxb2z7z8AAAAAAAAAAAAAAAAAAAAAxYHPe3Hk\\u002fz8xcDmh9rrvPwAAAAAAAABAyKaECf8K8D9NacfRQ3Z9PwAAAAAAAAAAePLh51hAeT\\u002fmQk3gMd7\\u002fP+mbrvT0VXk\\u002fEOYhuA0f8D8AAAAAAAAAACLJZ8F+BvA\\u002fUvddOAkW8D+s7uYroO3\\u002fP66HBcXsSv8+1Pcg1u0e8D9OfFenmwvwPwAAAAAAAABA6VxssSsL8D98YobAGcfvP4B10RZnuH0\\u002fAAAAAAAAAAAAAAAAAAAAAFrDScpj9XU\\u002fAAAAAAAAAEAAAAAAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQN021oO\\u002f+\\u002f8\\u002fN7YgfoAf8D8idEbUZALwPwAAAAAAAAAAFaAZfkkG8D8AAAAAAAAAALbqoTnJ9O8\\u002fc62EwvEOgT9WkFds\\u002fvT\\u002fPyRAuiCuwu8\\u002flOTYMQ0E8D8g+0bEsP7\\u002fPydG9kok\\u002fv8\\u002fbkXatdj+\\u002fz8SExKjp5F4PzAFlLroB\\u002fA\\u002fDMSlbl\\u002fugD+pZOqbK8HvP+9lrLU78O8\\u002f4kLxvO\\u002ff7z8AAAAAAAAAQOVKi7OG+\\u002f8\\u002f\\u002fGWcUQMZ8D+QyrwdS6x4P1QP0m9ZIvA\\u002fAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAEAh0RHmcN\\u002f\\u002fPzKoQaTA8v8\\u002fAAAAAAAAAADyWUbTa1+AP6qokBn9zO8\\u002fYJGuZOMS8D9EC5TvWPT\\u002fP3AR7Tvm1\\u002f8\\u002fEWhPIZX\\u002f\\u002fz8AAAAAAAAAQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAQJ6uI4EWAfA\\u002fJ2qgfUG+7z8AAAAAAAAAABXG2sK46\\u002f8\\u002fAAAAAAAAAAA=\"}},{\"label\":\"max_leaf_nodes\",\"ticktext\":[\"3\",\"5\",\"8\",\"14\",\"23\",\"39\",\"64\",\"108\",\"179\",\"299\"],\"tickvals\":[1.0986122886681098,1.6094379124341003,2.0794415416798357,2.6390573296152584,3.1354942159291497,3.6635616461296463,4.1588830833596715,4.68213122712422,5.187385805840755,5.700443573390687],\"values\":{\"dtype\":\"f8\",\"bdata\":\"Y9JS9XyXD0Cygcq4HXkEQKxomH9OAQNADllMpXg0D0BCm+Cuow0QQD4jgg5+jRBA+YN\\u002fZohKC0DTNrYd1iQRQO\\u002fbihe0zABAv5P\\u002fC7g5BUAUzdHzK8EBQDgugVk6zQBAWm8vGqxGDEDpx4KCwmURQE1ZYma62RNAgT+vp6paCUBGldAYOtUUQL3EesFSdQBAMP3RjCLfFECRIj40jNsUQM7cwutmsxZAsFBYfybdCEBRU2GoJgn9P8BkfBerggRAtKOihNVzFEDyGpt5MXANQHZp7lnBcwFAHILxO8K+AEALA6166pPxPxrk4GFu1fE\\u002fg5Lta+\\u002fK\\u002fD+nN7BM5nkSQHR\\u002fqzdqyPE\\u002fDzIKQu8a9j8hoIEUQc0WQHRbWVl4cxFA8zzjDPWqAEBctUJf1g8RQJ5knwURy\\u002fE\\u002f3UPP+g2U8T9HjgOK4W8QQOXw1Rv1iA5Aar6Fg32WDkBccURA3ZoUQF6nXb7ZjQFAH9Zk2zQ5FkB9umlbtnMUQJppUu0ETQJABd6ucwiwEkDqAfTbzhwUQIRF7EjfkQhAwgbS2cyDEED1YeEmx54BQDBElB+0MxRAvhK6K4fTA0A+HpyCGKMSQOft1jVjIw1AG7k3hu2KDkC7Dwp5oUoHQMQHJDHdafk\\u002fhv2S9ZelE0Cmf\\u002fnqhbwRQJMishhgyg9AwOxqFb+5+T86IRvv+q3xP+Kl+NA35vk\\u002fqRpXJCoOBUBvlabRj28JQOPfFET0Ig9A47tQWO5G9j9HzAB1ZKoLQIf4X\\u002fmRj\\u002fk\\u002fXssFJceOFEDjXQXfJbcJQBLuvhY8qwZA9Nn\\u002f1BkjE0CpgD8\\u002fSFIJQA1EJjylA\\u002f8\\u002fvCrm5UDTCEBUwfPJMJQFQNMyuzzHYAhATNCrnXy2FUAEd4tPzg8MQICMcQPrxwBAgGfNVs5lEEClDUT5gwQUQIdBX0RHBBBAmStgHc23FUAh6l1cHP4DQFAoV4EB0xBA3XRZs3CaD0DfCuJLO7j8P24EqIMiyfE\\u002fCwOteuqT8T9HJ1hWHN8IQAsDrXrqk\\u002fE\\u002faMkHDS76+T\\u002fSs8B32q8AQAsDrXrqk\\u002fE\\u002fZ5E9GPf0+T8=\"}},{\"label\":\"score time\",\"ticktext\":[\"0.02\",\"0.04\",\"0.05\",\"0.07\",\"0.09\",\"0.10\",\"0.12\",\"0.13\",\"0.15\",\"0.17\"],\"tickvals\":[0.020562052726745605,0.036791695488823786,0.05302133825090197,0.06925098101298015,0.08548062377505833,0.10171026653713651,0.11793990929921469,0.13416955206129288,0.15039919482337105,0.16662883758544922],\"values\":{\"dtype\":\"f8\",\"bdata\":\"KHSZbd+bqj\\u002fi7XOGSJujP939Qd1dI6U\\u002fDLd4WSKGqj\\u002fRGK5PdimrP1HIYIVC+6o\\u002f229AkfbjqD8H\\u002fuNpDVe6P52DiY+qC6A\\u002feM4xGLSYqD+KMiFeOB+cP9i5ffqiu5g\\u002fQYJETnPspT\\u002fQO12+bN+xP974J38WaLE\\u002f\\u002fqnLMjpGnj8ojdobgA6+P0w4jGHlU6Q\\u002f\\u002fzmN4fCItz+4NdJXDIKuPwIyFsP818Q\\u002f5V4HIrn6oj+JhVd4vbKjP89RI3t7lZw\\u002f6yy8OdPxpD+48DkL3pymP2NpwqiUD6E\\u002feQJR71d1qD9nUVySxmmYP1LrNpNDJJU\\u002fMF6uU5nQnT9sqv5CUZGwPwAAAAA4DpU\\u002fYekZO8qdmD8AAAAAGFTFP6rf3ERec6w\\u002fWn2Z6oTXnj\\u002fOfZ4DAWiwP9Jj0hkau7A\\u002fPy7+dhpVmz\\u002fujseoqICgPyElATSXeKo\\u002fZQW9TsJYtz8WYfeFB4CxP6+3R6ZoX5s\\u002fDZwnyKbFsj\\u002fXe0WyQwasP8hUVPTBBqE\\u002fGG3lbYqprj9oM7jANpWxP1vcC+Kxp6U\\u002fuj9ohijWpj\\u002fhpzV0FC+gP7gvm3fF57k\\u002fvdH4LhKuoD+YQG8oSdaxP5ZaqGdhLa0\\u002f1hmcFsCkpz+rC4duvrShPzkhygKz0qA\\u002f\\u002ff7h94HKrD8Y4k8XL4igP9iiOFlW1J8\\u002fHyvtJXS\\u002foT9h0hTYbd+hPyOhNPBsEZw\\u002fkXORC\\u002f1xpz8Wtd+YzZmvP\\u002fbv+vD5Kac\\u002fmrMf+f9Ynz9gi5GNIX2iPwfuvVcwKas\\u002fWYp+B0hHwz+ZGAaBffGrP6Tj09p\\u002ftKo\\u002fnFHcBQnVwj8T+N08oemiP+ysMNOJZZs\\u002fMwBza4KcpT+R+hyKKPiwPxHlWzHk3qM\\u002fWxaqyJ\\u002fGsz\\u002f9oYcALWCpPx1JtFIi5qM\\u002fFZmp6fWMrz\\u002fAGV6suQatPw+FhL3ERKg\\u002fE112ESw\\u002fsD9tpKSzLj+hP7YMhT3FNbE\\u002fgkg3L741rT9nJ6\\u002fZXeqnP+AMDh4e9aY\\u002fgMLaPV30nD+g\\u002fIdA2levP8GKWPbM1ps\\u002fKNkusxYYoz+HaV5gqEmgP+s\\u002fz1eVyJ8\\u002fJTwOwAGPnj8=\"}},{\"label\":\"fit time\",\"ticktext\":[\"0\",\"2\",\"3\",\"5\",\"6\",\"8\",\"9\",\"11\",\"13\",\"14\"],\"tickvals\":[0.29789769649505615,1.8244676060146756,3.351037515534295,4.877607425053915,6.404177334573534,7.930747244093153,9.457317153612774,10.983887063132393,12.510456972652012,14.03702688217163],\"values\":{\"dtype\":\"f8\",\"bdata\":\"fDVbJZ9gA0AARO2QQxr+P3JqZpBXev8\\u002fNBk0k58iEUDOGVaeJvMTQIbo22+2jAtAzM9whLBeCECK331u4gAcQMKhIvpWE\\u002f0\\u002fVE0zt\\u002fkOAkCITFqz4dj7P8wQCfoVcPg\\u002fPIhb63Z+CUAIopXTY\\u002f0dQF2TAcoqEyBA\\u002fCkjvpz+A0C+mZ0OYSUnQDzX4\\u002f+Zlfo\\u002fStSO8g8DJUDHWNUj924jQPVkGwMvmytAKxCBK7ae+T\\u002f5mmCXjnL1P5DvmANytwFAWqbT6FgPGUBT2+YdGuMFQOciP3NlzgFAJifJJQoh+z\\u002fe1C7LVlrqP5A8ipFqHvI\\u002fxN+7LIZL+j+eEJBW63sOQE9+PQUfkPE\\u002fLajIjKrN6T8rEUaYVXUXQCfCNFERghZAHe2\\u002fXTy69z+5CWx1xDoXQO0sZ\\u002fb4H\\u002f4\\u002fogJYl2lE5D9N0z41LWsUQIBy5nSjqBFAXSP\\u002fo+fPFUCmw7bLff4lQI3gpl4p19Q\\u002fRD+0qiZrJ0Cn3imuRLf\\u002fP\\u002fTGpr\\u002fYvv4\\u002fKeYkv3rqAUDpXFvZFb4XQDHHUTBwGQFAfiMXEGxvFUAAAACAwRDTP2NQSKTMtBZA3Qz651q39T\\u002frQszkYy8QQKCaPj31EOc\\u002fX1j9Ulru5j+DHj\\u002fTCvkGQM17N87d+Os\\u002fbIxg+iVEEUCsNVCTX6T5P9IKPdL1svg\\u002fPllni9gb3j\\u002fCHdI\\u002fN5b2PwAAAIDBENM\\u002frvrME\\u002fdlAUDdzf+GXHgKQBtZliICJfI\\u002fIZAyuqtw7z\\u002f8iolBi5P3P8FScT8H4vw\\u002fzk3CNaENKECB9a4YFZAGQChBVKo9IQRAh0mTaGM4IkBl9Nm1GakGQMOcL+j\\u002fVfw\\u002fgz882LniDEDpskCseBwHQKyYK++N+wpAAAAAMPUSLECSaloMDKQDQKKmuXG4EdY\\u002f6GBgqJ\\u002f6EUB\\u002ffFur+cMjQDvxO0U1VgZAs14Odvl+E0DqZF2NYBn8P9zP0+OT8\\u002fg\\u002fDh0cnaoDEkD\\u002fYMQkWCkAQHxlH4DAlPI\\u002fm2uAh82I8j+embccDlX+P8qlZtGlA\\u002fQ\\u002f1NO8LC0eA0DH4KshUfn9PxM2AgBsn\\u002fE\\u002fuGI9ESd39z8=\"}},{\"label\":\"score\",\"ticktext\":[\"0.61\",\"0.65\",\"0.69\",\"0.73\",\"0.77\",\"0.81\",\"0.85\",\"0.90\",\"0.94\",\"0.98\"],\"tickvals\":[0.605896937867263,0.6472125470696695,0.688528156272076,0.7298437654744825,0.771159374676889,0.8124749838792955,0.853790593081702,0.8951062022841085,0.936421811486515,0.9777374206889216],\"values\":{\"dtype\":\"f8\",\"bdata\":\"4uW9\\u002fJ9J7z\\u002fJEHNme0PvPxQ0R75SQ+8\\u002fIn2DfEFD7z+ByXuvpULvP6Y8QspBQe8\\u002fJo3EXig97z\\u002fWot3IhTvvP6jAlrWSOO8\\u002fMQqf1f427z8uYXAP+zTvP+r5tkW5LO8\\u002fHj+QUKwr7z+PLpNewCnvPxtwvRlzJu8\\u002f1Jty\\u002fP4l7z9mMdBlIiLvP0bOdaiIIO8\\u002fkENbCZQb7z+CA5HuBBnvPyIhq4VWEu8\\u002fWJtRQzoP7z9ykR0NaPvuPwaU1nfV+u4\\u002f6rjHNcH47j8m\\u002f6eDIfLuP3qBp4Xs8O4\\u002fVH4Aibvt7j9C3jAj5unuP0dTKXc20+4\\u002fzJ0QqoHO7j+SyQsgdMvuP6rVQS2zyO4\\u002fpDY46Z3H7j+3XuzNy8TuP8Ubo+Wqre4\\u002f6DDJFhah7j9U6dgYJqDuPxhZIGwIl+4\\u002fYKKbKUqT7j+8wi7oE43uPxkLsdXtiu4\\u002fBvOQ1XCH7j9UKSHlp4PuP15pPPOjdu4\\u002f3JDx1r1v7j\\u002fLUBEGfW\\u002fuP7mFs80Xb+4\\u002fOBw8X6Np7j92c4OJkWnuP8txMJBoZO4\\u002f5omc6P5b7j+UHEuQ+lTuPwv7cwzTU+4\\u002frtjPgCVR7j98soMp0EvuP\\u002fcHjU3kIu4\\u002fhK04rpIi7j96fRl\\u002fph\\u002fuP2OKTeV1H+4\\u002f8OMKun0N7j\\u002f2T9KKWvLtP5bjJewwyu0\\u002frsZan77G7T+8HB2nZ7DtP4T6QTXFqO0\\u002f8i8NYTWU7T+Q1DELv0btP0iY5zR3Le0\\u002fgOQSLgkn7T8eHuPuaiTtP9Lnj2g94Ow\\u002fril6aWHU7D9U3rO09cjsP4zznPvFuuw\\u002fHNqr3VOo7D+FJCFRuljsP4+SOvpzTew\\u002fnTQoxHZB7D8CopyS3znsP\\u002faH7pVjL+w\\u002fguo6huUa7D8uUHkXqdfrPzwep0J2yus\\u002f8Dxi5obH6z8ilsk9cn\\u002frP0puKQRPN+s\\u002fxONmVvwv6z8Mw+VCei7rP\\u002fx8BFec\\u002fOo\\u002fRtSuMNm86j+PoB+1J7fqP9T2Ww3Jquo\\u002foMCXbVek6j\\u002fKDOw3eULqP7ZCOvAuDOo\\u002f1TGzWiDT6T8u7TTc8GnpPwmpEIfuTuU\\u002ftF2c+YFj4z8=\"}}],\"labelangle\":15,\"labelside\":\"top\",\"line\":{\"color\":{\"dtype\":\"f8\",\"bdata\":\"4uW9\\u002fJ9J7z\\u002fJEHNme0PvPxQ0R75SQ+8\\u002fIn2DfEFD7z+ByXuvpULvP6Y8QspBQe8\\u002fJo3EXig97z\\u002fWot3IhTvvP6jAlrWSOO8\\u002fMQqf1f427z8uYXAP+zTvP+r5tkW5LO8\\u002fHj+QUKwr7z+PLpNewCnvPxtwvRlzJu8\\u002f1Jty\\u002fP4l7z9mMdBlIiLvP0bOdaiIIO8\\u002fkENbCZQb7z+CA5HuBBnvPyIhq4VWEu8\\u002fWJtRQzoP7z9ykR0NaPvuPwaU1nfV+u4\\u002f6rjHNcH47j8m\\u002f6eDIfLuP3qBp4Xs8O4\\u002fVH4Aibvt7j9C3jAj5unuP0dTKXc20+4\\u002fzJ0QqoHO7j+SyQsgdMvuP6rVQS2zyO4\\u002fpDY46Z3H7j+3XuzNy8TuP8Ubo+Wqre4\\u002f6DDJFhah7j9U6dgYJqDuPxhZIGwIl+4\\u002fYKKbKUqT7j+8wi7oE43uPxkLsdXtiu4\\u002fBvOQ1XCH7j9UKSHlp4PuP15pPPOjdu4\\u002f3JDx1r1v7j\\u002fLUBEGfW\\u002fuP7mFs80Xb+4\\u002fOBw8X6Np7j92c4OJkWnuP8txMJBoZO4\\u002f5omc6P5b7j+UHEuQ+lTuPwv7cwzTU+4\\u002frtjPgCVR7j98soMp0EvuP\\u002fcHjU3kIu4\\u002fhK04rpIi7j96fRl\\u002fph\\u002fuP2OKTeV1H+4\\u002f8OMKun0N7j\\u002f2T9KKWvLtP5bjJewwyu0\\u002frsZan77G7T+8HB2nZ7DtP4T6QTXFqO0\\u002f8i8NYTWU7T+Q1DELv0btP0iY5zR3Le0\\u002fgOQSLgkn7T8eHuPuaiTtP9Lnj2g94Ow\\u002fril6aWHU7D9U3rO09cjsP4zznPvFuuw\\u002fHNqr3VOo7D+FJCFRuljsP4+SOvpzTew\\u002fnTQoxHZB7D8CopyS3znsP\\u002faH7pVjL+w\\u002fguo6huUa7D8uUHkXqdfrPzwep0J2yus\\u002f8Dxi5obH6z8ilsk9cn\\u002frP0puKQRPN+s\\u002fxONmVvwv6z8Mw+VCei7rP\\u002fx8BFec\\u002fOo\\u002fRtSuMNm86j+PoB+1J7fqP9T2Ww3Jquo\\u002foMCXbVek6j\\u002fKDOw3eULqP7ZCOvAuDOo\\u002f1TGzWiDT6T8u7TTc8GnpPwmpEIfuTuU\\u002ftF2c+YFj4z8=\"},\"colorbar\":{\"title\":{\"text\":\"score\"}},\"colorscale\":[[0.0,\"rgb(0,0,255)\"],[1.0,\"rgb(255,0,0)\"]],\"showscale\":true},\"type\":\"parcoords\"}],                        {\"font\":{\"size\":18},\"margin\":{\"l\":200},\"template\":{\"data\":{\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scattermap\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermap\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"white\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"gridwidth\":2,\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"bgcolor\":\"#E5ECF6\",\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"zerolinewidth\":2}}}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('279b2532-c1c1-4569-9a4a-44c2ce41a4c9');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };            </script>        </div>\n```\n:::\n:::\n\n\n## More information about the Data Ops \n- Skrub [example gallery](https://skrub-data.org/stable/auto_examples/data_ops/index.html)\n- Skrub [user guide](https://skrub-data.org/stable/documentation.html)\n- [Tutorial](https://github.com/skrub-data/EuroSciPy2025) on timeseries \nforecasting at Euroscipy 2025\n- [Kaggle notebook](https://www.kaggle.com/code/ryye107/titanic-challenge-with-the-skrub-data-ops) \non the Titanic survival challenge\n\n\n# Wrapping up\n\n## {auto-animate=\"true\" } \n![](images/powerpuff_girls_1.png)\n\n## {auto-animate=\"true\" } \n![](images/powerpuff_girls_2.png)\n\n##  Getting involved {.smaller}\n::: {.nonincremental}\nDo you want to learn more? \n\n- [Skrub website](https://skrub-data.org/stable/) \n- [Skrub materials website](https://skrub-data.org/skrub-materials/index.html)\n- [Discord server](https://discord.gg/ABaPnm7fDC)\n\nFollow skrub on:\n\n- [Bluesky](https://bsky.app/profile/skrub-data.bsky.social)\n- [LinkedIn](https://www.linkedin.com/company/skrub-data/)\n\nStar skrub on GitHub, or contribute directly: \n\n- [GitHub repository](https://github.com/skrub-data/skrub/)\n:::\n\n## tl;dw: skrub \n::: {.nonincremental}\n- interactive data exploration: `TableReport`\n- automated pre-processing of pandas and polars dataframes: `Cleaner`\n- powerful feature engineering: `TableVectorizer`, `tabular_pipeline`\n- column- and dataframe-level operations: `ApplyToCols`, selectors\n- DataOps, plans, hyperparameter tuning, (almost) no leakage \n:::\n\n",
    "supporting": [
      "slides_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}